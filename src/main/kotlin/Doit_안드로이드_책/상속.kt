package Doit_안드로이드_책

//05. 상속


//======================================================================================================================

//1. 상속받기
//상속(inheritance) : 클래스 선언 시 다른 클래스를 참조해 선언하는 것
//상속의 이점 : 상위클래스에 정의된 멤버(변수, 함수)를 하위클래스에서 자신의 멤버처럼 사용가능

//open : 다른 클래스에서 상속할수 있도록 선언하는 키워드
//상위클래스 : 상속관계에서 상속대상이 되는 클래스
open class Super1(){}

//하위클래스 : 상속관계에서 상속받는 클래스
class sub1: Super1(){}

//======================================================================================================================

//2-1. 매개변수 있는 상위클래스 생성자 호출(상위클래스 인자 전달필수)
open class Super2(name: String){}
class sub2(name: String): Super2(name){}


//2-2. 하위클래스에 부생성자만 있을 때 상위클래스 생성자 호출
open class Super3(name: String){
    class Sub3(name: String): Super3(name){}
}

//======================================================================================================================

//3. 오버라이딩(overriding, 재정의) = 상위클래스에서 선언된 변수, 함수명으로 하위클래스에서 재선언하는 것
//변수 재정의 보다는 함수 재정의에 더 많이 사용됨
open class Super4 {
    open var var_data = 10
    open fun someFun(){
        println("첫번째로 정의한 변수값, $var_data")
    }
}

class Sub4: Super4(){
    override var var_data = 20
    override fun someFun() {
        println("두번째로 정의한 변수값, $var_data")
    }
}

fun main(){
    val obj = Super4()
    obj.someFun()      //출력결과 - 두번째로 정의한 변수값, 20
}

//======================================================================================================================

//접근제한자(visibility modifier) = 클래스의 멤버를 외부의 어느범위까지 이용할 것인지 결정하는 키워드

//4-1. public
//접근제한 없음 = 원하는 곳 어디서든 접근가능, 접근제한자 생략 시 기본설정
//모든 파일(최상위)에서, 모든 클래스(클래스 멤버)에서 사용가능

//4-2. internal
//같은 모듈(그래들, 메이븐 같은 빌드도구에서의 프로젝트 단위, 세트단위) 내에서만 접근가능

//4-3. protected
//최상위에서 사용불가
//상속관계의 하위클래스에서만 접근가능

//4-4. private
//해당 클래스 내부에서만 접근가능
//최상위로는 private 선언한 해당 파일 내부에서만 접근가능

//======================================================================================================================
